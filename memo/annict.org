* Annictについて

アニメの情報を管理できるAnnictというサービスがある。
このサービスはAPIを公開していて、これを使うとアニメの情報を自作のプログラムに組込める。

** APIの種類

REST APIとGraphQL APIの2つがある。
REST APIは今後機能追加が行われないらしいので、長期的に見たらGraphQLの方が
良さそう。今回はREST APIを使う。

REST APIのエンドポイントは[[https://api.annict.com/v1/]]となっている。
以降はこのエンドポイントをベースにしている前提でURLを書いていく。

** 認証

認証方式はAPIキーとOAuthに対応している。

APIキーの場合はトークンをBearerとして指定すれば良い。
また、Annictはパラメータにトークンを指定することにも対応している。

*** エピソードの放送日時を取得したい

予めチャンネル一覧で見ている放送局/サービスを追加しておく。
これをやっておかないと次の操作でそもそも選択肢が表示されない。

次に[[https://annict.com/track][放送予定ページ]]を開く。
見たい/見てるを選択している作品が一覧となって表示されるので、
まずそれらの作品をクリックする。
すると右側にサイドバーが開くので、その上部にある「番組情報」から先程自身が選択した
チャンネルを選択する。

以上の操作を行わないと、`/me/programs`にアクセスしてもそもそも情報を受け取れないので要注意。

`me/programs?filter_started_at_gt=時刻`で指定した時刻より先のエピソードを受け取れる。

時刻のフォーマットは`2016/05/06 21:10`のような形式となっている。
**空白が含まれているためURLエンコードが必要なことに注意。**

戻り値はJSONになっていて、`programs`に各話の情報が含まれた配列が格納されている。
各要素のうち、

- `episode`でエピソードの情報
- `work`で作品自体の情報

が取れる。

話のタイトルはepisodeから、作品のタイトルはworkから取ると良い。
なお放送日時などの情報は各要素の`started_at`に含まれている。


** tabulated-modeについて

Annictと関係はないのだけど、今回Annictの情報を表として表示させる際にtabulated-modeを使用したので
それについて書いていく。

tabulated-modeは表を表示するためのモードで、指定した変数に値を格納することで
ユーザーも表を作れる。

表のrowを指定するのが`tabulated-list-format`で、
右から要素名、幅、ソートを行うかどうかを指定する。なおソートは文字列値を比較することで行われる。

値がリストのベクターである点に注意。

#+begin_src emacs-lisp
    (setq tabulated-list-format
          [("id" 3 t)
           ("name" 10 t)]) 
#+end_src

表のcolumnを指定するのが`tabulated-list-entries`で、これは以下のように指定する。
当たり前だが先述した`tabulated-list-format`の値によって指定すべき値が変わってくる。

基本的には`'((nil [tabulated-list-formatで指定した順に値を指定]))`すれば良い。

ベクターを要素に含むリストであること、各要素のリストは第一の要素がnilであることに注意。
なおこのnilはidで、これを指定するとsortする際この値を考慮して行われる。

#+begin_src emacs-lisp
        (setq tabulated-list-entries
              '((nil ["1" "hoge"])
  	      (nil ["2" "fuga"])))
#+end_src

